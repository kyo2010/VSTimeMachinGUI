/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vs.time.kkv.connector.MainlPannels.RegistrationListImport;

import vs.time.kkv.connector.web.RaceHttpServer;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import vs.time.kkv.connector.MainForm;
import vs.time.kkv.connector.MainlPannels.RegistrationListImport.RegistrationSites.FPVSport;
import vs.time.kkv.connector.MainlPannels.RegistrationListImport.RegistrationSites.IRegSite;
import vs.time.kkv.connector.MainlPannels.RegistrationTab;
import vs.time.kkv.connector.Utils.TTS.TextToSpeachFactory;
import vs.time.kkv.models.VS_RACE;
import vs.time.kkv.models.VS_REGISTRATION;
import vs.time.kkv.models.VS_SETTING;
import vs.time.kkv.models.VS_USERS;

/**
 *
 * @author kyo
 */
public class RegistrationImportForm extends javax.swing.JFrame {

  RegistrationTab regTab = null;

  List<IRegSite> sites = new ArrayList<>();

  public IRegSite getSite(String name) {
    for (IRegSite site : sites) {
      if (site.getSystemName().equalsIgnoreCase(name)) {
        return site;
      }
    }
    return null;
  }

  public final String PLEASE_SELECT_WEB_SYSTEM = "none";

  /**
   * Creates new form WLANSetting
   */
  public RegistrationImportForm(RegistrationTab regTab) {
    initComponents();
    this.regTab = regTab;
    setVisible(false);

    sites.add(new FPVSport());

    String[] list = new String[sites.size() + 1];
    list[0] = PLEASE_SELECT_WEB_SYSTEM;
    int index = 1;
    for (IRegSite site : sites) {
      list[index] = site.getSystemName();
      index++;
    }
    jcbSites.setModel(new javax.swing.DefaultComboBoxModel(list));
    jcbRaces.setModel(new javax.swing.DefaultComboBoxModel(new String[0]));

    jcbSites.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent e) {
        //JOptionPane.showMessageDialog(null, "sel:"+jcbSites.getSelectedItem()); 
        siteSelected();
      }
    });
  }

  static RegistrationImportForm singelton = null;

  public static RegistrationImportForm init(RegistrationTab regTab) {
    if (singelton == null) {
      singelton = new RegistrationImportForm(regTab);
    }

    RegistrationImportForm th = singelton;
    if (regTab != null) {
      regTab.mainForm.setFormOnCenter(th);
    }

    singelton.prepare();

    return singelton;
  }

  public String setAutoLoadEvent = null;

  public void prepare() {
    if (regTab.mainForm.activeRace.WEB_SYSTEM_SID != null && !regTab.mainForm.activeRace.WEB_SYSTEM_SID.equals("")) {
      setAutoLoadEvent = regTab.mainForm.activeRace.WEB_SYSTEM_CAPTION.trim();
      jcbSites.setSelectedItem(regTab.mainForm.activeRace.WEB_SYSTEM_SID);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jButOk = new javax.swing.JButton();
    jButCancel = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jcbSites = new javax.swing.JComboBox<>();
    jcbRaces = new javax.swing.JComboBox<>();
    chbUpdatePhoto = new javax.swing.JCheckBox();

    setTitle("Pilots Import from Web");
    setIconImage(MainForm.getWindowsIcon().getImage());
    setResizable(false);

    jButOk.setText("Ok");
    jButOk.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButOkActionPerformed(evt);
      }
    });

    jButCancel.setText("Cancel");
    jButCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButCancelActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButOk, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
        .addComponent(jButCancel)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButOk)
          .addComponent(jButCancel))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jLabel3.setText("Web Resource");

    jLabel4.setText("Race");

    jcbSites.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    jcbSites.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jcbSitesItemStateChanged(evt);
      }
    });

    jcbRaces.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    chbUpdatePhoto.setSelected(true);
    chbUpdatePhoto.setText("Refresh PHOTO from Web");
    chbUpdatePhoto.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(chbUpdatePhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel3)
              .addComponent(jLabel4))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jcbSites, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jcbRaces, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())))
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(jcbSites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(jcbRaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(chbUpdatePhoto)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButCancelActionPerformed
    setVisible(false);
  }//GEN-LAST:event_jButCancelActionPerformed

  private void jButOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButOkActionPerformed
    if (PLEASE_SELECT_WEB_SYSTEM.equalsIgnoreCase(jcbSites.getSelectedItem().toString())) {
    } else {
      try {
        IRegSite site = getSite(jcbSites.getSelectedItem().toString());
        if (site != null) {
          site.load();
          List<VS_RACE> races = site.getRaces();
          int count_export_pilots = 0;
          int count_updated_photos_pilots = 0;
          for (VS_RACE race : races) {
            if (race.RACE_NAME.trim().equalsIgnoreCase(jcbRaces.getSelectedItem().toString())) {
              if (race.users != null) {
                Connection con = regTab.mainForm.con;
                for (VS_REGISTRATION pilot : race.users) {

                  pilot.VS_USER_NAME = pilot.VS_USER_NAME.trim();
                  pilot.FIRST_NAME = pilot.FIRST_NAME.trim();
                  pilot.SECOND_NAME = pilot.SECOND_NAME.trim();

                  Map<String, VS_REGISTRATION> regs = VS_REGISTRATION.dbControl.getMap(con, "VS_USER_NAME", "VS_RACE_ID=?", regTab.mainForm.activeRace.RACE_ID);

                  /*if (pilot.VS_USER_NAME.trim().equalsIgnoreCase("Daniel_orlov")){
                    int y = 0;
                  }*/
                  
                  VS_REGISTRATION reg = null;
                  for (VS_REGISTRATION reg1 : regs.values()) {
                    if (reg1.VS_USER_NAME.trim().equalsIgnoreCase(pilot.VS_USER_NAME.trim())) {
                      reg = reg1;
                      break;
                    }
                    try {
                      if (!"".equalsIgnoreCase(reg1.WEB_SID) && reg1.WEB_SID.trim().equalsIgnoreCase(pilot.WEB_SID.trim())) {
                        reg = reg1;
                        break;
                      }
                    } catch (Exception ein) {
                    }
                  }

                  //VS_REGISTRATION reg = regs.get(pilot.VS_USER_NAME);
                  if (reg == null) {
                    try {
                      pilot.VS_RACE_ID = regTab.mainForm.activeRace.RACE_ID;
                      pilot.NUM = VS_REGISTRATION.maxNum(con, pilot.VS_RACE_ID) + 1;
                      if (pilot.VS_TRANS1 != 0) {
                        for (VS_REGISTRATION reg1 : regs.values()) {
                          if (reg1.VS_TRANS1 == pilot.VS_TRANS1 || reg1.VS_TRANS2 == pilot.VS_TRANS1
                                  || reg1.VS_TRANS3 == pilot.VS_TRANS1) {
                            JOptionPane.showMessageDialog(this, "Transponder for pilot " + pilot.VS_USER_NAME + " is duplocated.\nPilot " + reg1.VS_USER_NAME + " has the same transponder", "Information", JOptionPane.INFORMATION_MESSAGE);
                            pilot.VS_TRANS1 = 0;
                          }
                        }
                      }
                      if (pilot.PHOTO != null && !pilot.PHOTO.equals("")) {
                        pilot.PHOTO = site.getImageFromWeb(pilot.PHOTO);
                        count_updated_photos_pilots++;
                      }

                      VS_REGISTRATION.dbControl.insert(con, pilot);
                      VS_USERS global_user = VS_REGISTRATION.updateGlobalUserPHOTO(con, pilot);

                      count_export_pilots++;
                    } catch (Exception e) {

                    }
                  } else {
                    if (pilot.VS_TRANS1 != 0
                            && (reg.VS_TRANS1 != pilot.VS_TRANS1 || reg.VS_TRANS2 != pilot.VS_TRANS2 || reg.VS_TRANS3 != pilot.VS_TRANS3)) {
                      /*pilot.ID = reg.ID;
                      pilot.VS_RACE_ID = reg.VS_RACE_ID;
                      if (pilot.PHOTO != null && !pilot.PHOTO.equals("") && !reg.WEB_PHOTO_URL.equals(pilot.WEB_PHOTO_URL)) {                        
                      }else{
                        pilot.PHOTO = reg.PHOTO;
                        pilot.PHOTO = reg.PHOTO;
                        VS_REGISTRATION.dbControl.update(con, pilot);
                      }*/
                      reg.VS_TRANS1 = pilot.VS_TRANS1;
                      reg.VS_TRANS2 = pilot.VS_TRANS2;
                      reg.VS_TRANS3 = pilot.VS_TRANS3;
                      VS_REGISTRATION.dbControl.update(con, reg);
                    }                    
                    if (chbUpdatePhoto.isSelected()) {
                      //if (pilot.PHOTO != null && !pilot.PHOTO.equals("") && !reg.WEB_PHOTO_URL.equals(pilot.WEB_PHOTO_URL)) {
                      pilot.PHOTO = site.getImageFromWeb(pilot.PHOTO);
                      reg.PHOTO = pilot.PHOTO;
                      reg.WEB_PHOTO_URL = pilot.WEB_PHOTO_URL;
                      count_updated_photos_pilots++;
                      VS_REGISTRATION.dbControl.update(con, reg);
                      VS_REGISTRATION.updateGlobalUserPHOTO(con, reg);
                      //}

                    }
                  }
                }
              }
              break;
            }
          }
          regTab.mainForm.activeRace.WEB_SYSTEM_SID = jcbSites.getSelectedItem().toString();
          regTab.mainForm.activeRace.WEB_SYSTEM_CAPTION = jcbRaces.getSelectedItem().toString();

          VS_RACE.dbControl.update(regTab.mainForm.con, regTab.mainForm.activeRace);

          regTab.refreshData();
          JOptionPane.showMessageDialog(this, "Export pilots : " + count_export_pilots + "\n"
                  + count_updated_photos_pilots + " photos were updated", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
      } catch (Exception e) {
        MainForm._toLog(e);
      }
    }
    setVisible(false);
  }//GEN-LAST:event_jButOkActionPerformed

  private void jcbSitesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSitesItemStateChanged
    // TODO add your handling code here:

  }//GEN-LAST:event_jcbSitesItemStateChanged

  public void siteSelected() {
    //jcbRaces.setModel(new javax.swing.DefaultComboBoxModel(new String[0]));
    if (PLEASE_SELECT_WEB_SYSTEM.equalsIgnoreCase(jcbSites.getSelectedItem().toString())) {
    } else {
      try {
        IRegSite site = getSite(jcbSites.getSelectedItem().toString());
        if (site != null) {
          site.load();
          List<VS_RACE> races = site.getRaces();
          String[] list = new String[races.size()];
          int index = 0;
          int selIndex = 0;
          for (VS_RACE race : races) {
            list[index] = race.RACE_NAME.trim();
            if (setAutoLoadEvent != null && setAutoLoadEvent.equalsIgnoreCase(race.RACE_NAME.trim())) {
              selIndex = index;
            }
            index++;
          }
          jcbRaces.setModel(new javax.swing.DefaultComboBoxModel(list));
          if (selIndex != 0) {
            jcbRaces.setSelectedIndex(selIndex);
          }
          //jcbRaces.setSelectedItem(setAutoLoadEvent);
          /*  if (setAutoLoadEvent!=null){
            jcbRaces.setSelectedItem(setAutoLoadEvent);
          }
          setAutoLoadEvent = null;*/
        }
      } catch (Exception e) {
        MainForm._toLog(e);
        jcbRaces.setModel(new javax.swing.DefaultComboBoxModel(new String[0]));
      }
    }
  }

  public void buttnCaptionRefresh() {

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox chbUpdatePhoto;
  private javax.swing.JButton jButCancel;
  private javax.swing.JButton jButOk;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JComboBox<String> jcbRaces;
  private javax.swing.JComboBox<String> jcbSites;
  // End of variables declaration//GEN-END:variables
}
